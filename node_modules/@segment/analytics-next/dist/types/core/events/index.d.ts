import { ID, User } from '../user';
import { Options, Integrations, EventProperties, Traits, SegmentEvent } from './interfaces';
import { PageContext } from '../page';
import { CoreEventFactory } from '@segment/analytics-core';
export * from './interfaces';
export declare class EventFactory extends CoreEventFactory {
    user: User;
    constructor(user: User);
    /**
     * Updates the anonymousId *globally* if it's provided in the options.
     * This should generally be done in the identify method, but some customers rely on this.
     */
    private maybeUpdateAnonId;
    /**
     * add user id / anonymous id to the event
     */
    private addIdentity;
    track(event: string, properties?: EventProperties, options?: Options, globalIntegrations?: Integrations, pageCtx?: PageContext): SegmentEvent;
    page(category: string | null, page: string | null, properties?: EventProperties, options?: Options, globalIntegrations?: Integrations, pageCtx?: PageContext): SegmentEvent;
    screen(category: string | null, screen: string | null, properties?: EventProperties, options?: Options, globalIntegrations?: Integrations, pageCtx?: PageContext): SegmentEvent;
    identify(userId: ID, traits?: Traits, options?: Options, globalIntegrations?: Integrations, pageCtx?: PageContext): SegmentEvent;
    group(groupId: ID, traits?: Traits, options?: Options, globalIntegrations?: Integrations, pageCtx?: PageContext): SegmentEvent;
    alias(to: string, from: string | null, options?: Options, globalIntegrations?: Integrations, pageCtx?: PageContext): SegmentEvent;
}
//# sourceMappingURL=index.d.ts.map